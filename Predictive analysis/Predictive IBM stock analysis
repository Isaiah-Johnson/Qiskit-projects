from alpha_vantage.timeseries import TimeSeries
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
import numpy as np
from qiskit import QuantumCircuit
from qiskit.circuit.library import RealAmplitudes
from qiskit.primitives import Estimator
from qiskit.quantum_info import SparsePauliOp
import matplotlib.pyplot as plt
import mplfinance as mpf

# Step 1: Retrieve Data Using Alpha Vantage API
api_key = 'API_Key'  # Replace with your Alpha Vantage API key
ts = TimeSeries(key=api_key, output_format='pandas')

# List of company symbols
companies = ['IBM', 'AAPL']

# Function to retrieve and preprocess data for a given company symbol
def get_preprocess_data(symbol):
    data, _ = ts.get_daily(symbol=symbol, outputsize='full')
    data = data[['1. open', '2. high', '3. low', '4. close', '5. volume']]
    data.columns = ['Open', 'High', 'Low', 'Close', 'Volume']
    data = data.reset_index()
    data['Date'] = pd.to_datetime(data['date'])
    data.set_index('Date', inplace=True)
    return data

# Function to preprocess data for quantum computing
def preprocess_quantum_data(data, n_qubits):
    scaler = MinMaxScaler()
    data['Close'] = scaler.fit_transform(data[['Close']])
    data_points = len(data)
    steps = data_points // n_qubits  # Ensure the data points are divisible by n_qubits
    data_quantum = data['Close'].values[:n_qubits*steps].reshape((steps, n_qubits))
    return data_quantum

# Function to create a quantum circuit for given data points
def create_quantum_circuit(data_point, n_qubits):
    circuit = QuantumCircuit(n_qubits)
    for i in range(n_qubits):
        circuit.rx(data_point[i] * np.pi, i)
    return circuit

# Number of qubits
n_qubits = 2

# Process data for each company
all_data = {}
for company in companies:
    data = get_preprocess_data(company)
    data_quantum = preprocess_quantum_data(data, n_qubits)
    circuits = [create_quantum_circuit(dp, n_qubits) for dp in data_quantum]
    all_data[company] = {
        'data': data,
        'data_quantum': data_quantum,
        'circuits': circuits
    }

# Perform quantum estimation for each company
H = SparsePauliOp.from_list([("II", 1), ("IZ", 2), ("XI", 3)])  # Example Hamiltonian
estimator = Estimator()
results = {}

for company in companies:
    company_data = all_data[company]
    company_results = []
    for circuit in company_data['circuits']:
        job = estimator.run([circuit], [H])
        result = job.result()
        company_results.append(result.values)
    results[company] = company_results

# Visualize the results for each company separately
for company in companies:
    data = all_data[company]['data']
    mpf.plot(data, type='line', mav=(10, 20), volume=True, title=f'{company} Daily Price', ylabel='Price', ylabel_lower='Volume')
    plt.show()
