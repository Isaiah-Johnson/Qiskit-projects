# The warning messages about composing errors are expected when multiple noise models are applied to the same gate operations. 
# They do not indicate an error in the simulation but rather that additional noise models are being composed with existing ones.

# Import necessary Qiskit modules
from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
from qiskit_aer.noise import NoiseModel, depolarizing_error, pauli_error, thermal_relaxation_error
from qiskit.visualization import plot_histogram
import random
import numpy as np
from hashlib import sha256

# Setup key parameters
KEY_LENGTH = 50  # Temporarily reduced key length for debugging
random.seed(0)

# Function to generate random bases (0 for Z-basis, 1 for X-basis)
def generate_random_bases(length):
    return [random.randint(0, 1) for _ in range(length)]

# Function to create qubits in superposition states (passive emission)
def create_passive_qubits(length):
    qubits = []
    for _ in range(length):
        qc = QuantumCircuit(1, 1)
        qc.h(0)  # Create superposition state
        qubits.append(qc)
    return qubits

# Function to measure qubits in specified bases
def measure_qubits(qubits, bases, noise_model=None):
    results = []
    simulator = AerSimulator(noise_model=noise_model)
    for qubit, basis in zip(qubits, bases):
        if basis == 1:  # X-basis
            qubit.h(0)
        qubit.measure(0, 0)
        compiled_circuit = transpile(qubit, simulator)
        result = simulator.run(compiled_circuit, shots=1).result()
        counts = result.get_counts()
        measured_bit = int(max(counts, key=counts.get))
        results.append(measured_bit)
    return results

# Improved Error Correction using simple parity check
def improved_error_correction(alice_key, bob_key):
    corrected_bob_key = []
    for a, b in zip(alice_key, bob_key):
        if a == b:
            corrected_bob_key.append(b)
        else:
            corrected_bob_key.append(a)  # Assuming Alice's key is correct for simplification
    return alice_key, corrected_bob_key

# Advanced Privacy amplification using SHA-256 hash function
def privacy_amplification(key, hash_length):
    key_str = ''.join(map(str, key))  # Convert list of bits to string
    hash_digest = sha256(key_str.encode()).hexdigest()
    return [int(bit) for bit in bin(int(hash_digest, 16))[2:hash_length+2]]  # Return required number of bits

# Custom noise model for simulation
def create_noise_model():
    noise_model = NoiseModel()

    # Error probabilities
    p_reset = 0.01  # Reduced error probabilities for debugging
    p_meas = 0.02
    p_gate1 = 0.03
    t1 = 50e3  # T1 time in microseconds
    t2 = 70e3  # T2 time in microseconds
    gate_time = 100  # Gate time for relaxation error

    # QuantumError objects
    error_reset = pauli_error([('X', p_reset), ('I', 1 - p_reset)])
    error_meas = pauli_error([('X', p_meas), ('I', 1 - p_meas)])
    error_gate1 = depolarizing_error(p_gate1, 1)
    error_gate2 = depolarizing_error(p_gate1, 2)  # Correctly create a two-qubit depolarizing error
    error_thermal_single = thermal_relaxation_error(t1, t2, gate_time)
    error_thermal_two = error_thermal_single.tensor(error_thermal_single)  # Create a two-qubit thermal relaxation error

    # Add errors to noise model
    noise_model.add_all_qubit_quantum_error(error_reset, "reset")
    noise_model.add_all_qubit_quantum_error(error_meas, "measure")
    noise_model.add_all_qubit_quantum_error(error_gate1, ["u1", "u2", "u3"])
    noise_model.add_all_qubit_quantum_error(error_gate2, ["cx"])
    noise_model.add_all_qubit_quantum_error(error_thermal_single, ["u1", "u2", "u3"])
    noise_model.add_all_qubit_quantum_error(error_thermal_two, ["cx"])

    return noise_model

# Function to detect eavesdropping
def detect_eavesdropping(alice_key, bob_key):
    comparison_length = min(len(alice_key), len(bob_key)) // 5  # Compare 20% of the key for better detection
    alice_sample = alice_key[:comparison_length]
    bob_sample = bob_key[:comparison_length]
    return alice_sample == bob_sample

# Alice's and Bob's operations
alice_bases = generate_random_bases(KEY_LENGTH)
alice_qubits = create_passive_qubits(KEY_LENGTH)

bob_bases = generate_random_bases(KEY_LENGTH)
noise_model = create_noise_model()
bob_results = measure_qubits(alice_qubits, bob_bases, noise_model)

# Basis comparison and key generation
shared_indices = [i for i in range(KEY_LENGTH) if alice_bases[i] == bob_bases[i]]
alice_key = [random.randint(0, 1) for _ in shared_indices]  # Simulating passive emission without bit generator
bob_key = [bob_results[i] for i in shared_indices]

# Improved error correction using majority voting
alice_key, bob_key = improved_error_correction(alice_key, bob_key)

# Eavesdropping detection
if detect_eavesdropping(alice_key, bob_key):
    print("No eavesdropping detected. Proceeding to privacy amplification.")
else:
    print("Eavesdropping detected! Aborting key generation.")
    exit()

# Privacy amplification
final_key_length = min(len(alice_key), len(bob_key)) // 2
alice_final_key = privacy_amplification(alice_key, final_key_length)
bob_final_key = privacy_amplification(bob_key, final_key_length)

# Display results
print("Alice's bases:", alice_bases)
print("Bob's bases:", bob_bases)
print("Bob's measured bits:", bob_results)
print("Shared bits indices:", shared_indices)
print("Alice's key:", alice_key)
print("Bob's key:", bob_key)
print("Alice's final key:", alice_final_key)
print("Bob's final key:", bob_final_key)

# Key comparison
if alice_final_key == bob_final_key:
    print("Keys match! Secure key established.")
else:
    print("Keys do not match. Interception might have occurred.")

# Convert final keys to strings for visualization
alice_final_key_str = ''.join(map(str, alice_final_key))
bob_final_key_str = ''.join(map(str, bob_final_key))

# Create combined histogram for final keys
combined_key_counts = {
    f"Alice's key: {alice_final_key_str}": 1,
    f"Bob's key: {bob_final_key_str}": 1
}

# Visualization of results
plot_histogram(combined_key_counts, legend=['Final keys'])
