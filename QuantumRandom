# Importing necessary Qiskit libraries
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit
from qiskit_aer import AerSimulator
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt
import numpy as np

# Function to map one range to another
def real_map(value, leftMin, leftMax, rightMin, rightMax):
    leftSpan = leftMax - leftMin
    rightSpan = rightMax - rightMin
    valueScaled = float(value - leftMin) / float(leftSpan)
    return rightMin + (valueScaled * rightSpan)

# Quantum Random Number generator
def QRandom(a, b, qubits=2, shots=1000, simulator=None, circ=None):
    if simulator is None:
        simulator = AerSimulator()
    
    if circ is None:
        # Create quantum and classical registers
        q = QuantumRegister(qubits, 'q')
        c = ClassicalRegister(qubits, 'c')
        # Create a quantum circuit
        circ = QuantumCircuit(q, c)
        
        # Apply Hadamard gate to each qubit to create superposition
        for i in range(qubits):
            circ.h(q[i])
        
        # Measure the qubits
        circ.measure(q, c)

    # Use AerSimulator to run the circuit
    job = simulator.run(circ, shots=shots)
    result = job.result()
    counts = result.get_counts(circ)

    # Combine results from all shots to generate a random number
    weighted_sum = sum(int(bitstring, 2) * count for bitstring, count in counts.items())
    total_counts = sum(counts.values())
    
    average_value = weighted_sum / total_counts
    y = real_map(average_value, 0, 2**qubits - 1, a, b)
    
    return y

# Create simulator and circuit once
simulator = AerSimulator()
q = QuantumRegister(3, 'q')
c = ClassicalRegister(3, 'c')
circ = QuantumCircuit(q, c)
for i in range(3):
    circ.h(q[i])
circ.measure(q, c)

# Generate random numbers
x = [QRandom(0, 100, 3, shots=1000, simulator=simulator, circ=circ) for _ in range(40)]

# Plot the quantum random numbers
plt.figure(figsize=(12, 6))
plt.plot(x, marker='o', linestyle='-', color='b', markersize=5, linewidth=1.5)
plt.title("Quantum Random Numbers")
plt.xlabel("Iteration")
plt.ylabel("Random Number")
plt.grid(True)
plt.show()
