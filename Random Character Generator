# Random Character Generator

import random
from qiskit import QuantumCircuit, transpile
from qiskit_aer import AerSimulator
from qiskit.primitives import Sampler

# Create a quantum circuit for random number generation
def create_circuit(num_qubits):
    qc = QuantumCircuit(num_qubits, num_qubits)
    for i in range(num_qubits):
        qc.h(i)
    qc.measure(range(num_qubits), range(num_qubits))
    return qc

# Function to generate random bits using Qiskit's Sampler primitive
def generate_random_bits_with_sampler(num_qubits, num_bits, shots=1024):
    qc = create_circuit(num_qubits)
    sampler = Sampler()
    bit_string = ""
    while len(bit_string) < num_bits:
        result = sampler.run(circuits=[qc], shots=shots).result()
        counts = result.quasi_dists[0].binary_probabilities()
        for key in counts:
            bit_string += key * int(counts[key] * shots)
    return bit_string[:num_bits]

# Mapping binary sequences to a larger character set
def binary_to_characters(binary_str):
    # Define the extended character set
    char_set = (
        "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-_=+[{]}|;:'\",<.>/?`~ሁሂሄህሆለመሞዉ中文漢字あいうえおかきくけこさしすせそたちつてとトナニヌネノハヒフヘホマミムメモヤユヨझञटठडढणतथदधनपझञटठडढणतथदधनपดตถทธนบปผฝพฟ"
    )
    # Shuffle the character set thoroughly
    char_set = list(char_set)
    random.shuffle(char_set)
    char_set_length = len(char_set)
    
    # Split the binary string into chunks of appropriate length
    chunk_size = len(bin(char_set_length - 1)[2:])  # Length of the binary representation of the index of the last character
    chunks = [binary_str[i:i + chunk_size] for i in range(0, len(binary_str), chunk_size)]
    
    # Convert each binary chunk to the corresponding character
    characters = ''.join([char_set[int(chunk, 2) % char_set_length] for chunk in chunks if chunk])
    return characters

# Generate a random string of characters using the Sampler
def generate_random_string(num_qubits, length, shots=1024):
    # Generate more bits than needed to ensure we can map to characters
    random_bits = generate_random_bits_with_sampler(num_qubits, length * 8, shots)
    random_string = binary_to_characters(random_bits)
    return random_string[:length]  # Ensure the string is exactly the desired length

# Generate a random string of 500 characters using Sampler with 5 qubits
random_string_sampler = generate_random_string(5, 500)
print("Random string using Sampler (500 characters):", random_string_sampler)
